-- Vengeance Demon Hunter WeakAura for displaying your accumulated health
-- includes: Soul Shards, Soul Cleave, Soul Carver, Feast of Souls, Devour Souls
-- and Soul Barrier

-- and your accumulated pain
-- includes: Immolation Aura, Metamorphosis, Consume Magic

----------------------- configure stuff here ----------------------------------

-- shortcuts
local p = "player"

local features = {
  -- health prediction
  ["hp"] = {
    ["Feast of Souls"] = true, -- predict the healing of Feast of Souls
    ["Soul Carver"] = true, -- predict the resulting healing of Soul Cleaver
    ["Soul Cleave"] = true -- predict soul cleave heals
  },

  -- health gain
  ["hg"] = {
    ["Feast of Souls"] = true -- should the Feast of Souls Hot be shown?
  },

  -- power prediction
  ["pp"] = {
    ["Immolation Aura"] = true, -- predict pain gains from Immolation Aura
    ["Consume Magic"] = false -- predict pain gains from successfull Consume Magic interrupts
  },

  -- power gain
  ["pg"] = {
    ["Immolation Aura"] = true, -- forecast pain gains from Immolation Aura
    ["Metamorphosis"] = true, -- forecast pain gains from Metamorphosis
    ["Blade Turning"] = true -- forecasts pain gains from Blade Turning

  },
  -- general features
  ["crit"] = true, -- whether crit is included in the heal prediction
  ["ignore cost"] = false -- whether predictions should only be made for spells that are castable (due to their resources cost)
}
-------------------------------------------------------------------------------


------------------------probably no change required here-----------------------
local soul_cleave_formula = function(ap) return ap * 5 end -- formula for calculating the minimal heal of Soul Cleave
local soul_cleave_min_cost = 30 -- the minimal cost of Soul Cleave
local soul_cleave_max_cost = 60 -- the maximal cost of Soul Cleave
local soul_carver_soul_fragment_count = 5 -- how many Soul Fragments are spawned by Soul Carver
local immolation_aura_pain_gain = 20 -- how much pain is gained over the duration of Immolation Aura
local feast_of_souls_location = {row = 2, column = 1} -- where Feast of Souls is located in the talent tab
local metamorphosis_pain_gain = 15 * 7 -- how much pain is generated over the duration of Metamorphosis
local fueled_by_pain_gain = 5 * 7 -- how much pain is generated over the duration of Fueled by Pain procs
local blade_turning_gain = 10 * 0.5 -- how much extra pain is generated by Blade Turning
-------------------------------------------------------------------------------


---------------------- fetching info once -------------------------------------
local devour_souls_scalar = 1
local soul_carver_unlocked = false
local feast_of_souls_talented = false
-------------------------------------------------------------------------------


----------------------- WeakAuras globals -------------------------------------
WeakAuras.VB = {}

WeakAuras.VB.SoulCleavePrediction = {current = 0, max = 0}
WeakAuras.VB.SoulCarverPrediction = {current = 0, max = 0}
WeakAuras.VB.FeastOfSoulsPrediction = {current = 0, max = 0}
WeakAuras.VB.FeastOfSoulsGain = {current = 0, max = 0}

WeakAuras.VB.ImmolationAuraPrediction = {current = 0, max = 0}
WeakAuras.VB.ImmolationAuraGain = {current = 0, max = 0}
WeakAuras.VB.MetamorphosisGain = {current = 0, max = 0}
WeakAuras.VB.BladeTurningGain = {current = 0, max = 0}

WeakAuras.VB.Absorbs = 0
-------------------------------------------------------------------------------


-------------------------forward declarations ---------------------------------
local UpdatePower
local UpdateHealth
local UpdateTalents
local UpdateAbsorbs
local UpdateArtifactTraits
local UpdateGain
local FeastOfSoulsPrediction
local FeastOfSoulsGain
local SoulCleavePrediction
local SoulCleaveGain
local SoulCarverPrediction
local ImmolationAuraPrediction
local ImmolationAuraGain
local MetamorphosisGain
local BladeTurningGain
local GetAP
local GetCrit
local GetHeal
local EventHandlerDispatcher




----------------------- persisting stuff --------------------------------------
-- spells
-- first slot: availability
-- second slot: continuation upon availability change
local spellAvailability = {
  ["Soul Carver"] = {available = true, continuation = SoulCarverPrediction},
  ["Immolation Aura"] = {available = true, continuation = ImmolationAuraPrediction}
}

-- bar values
local values = {
  ["hp"] = {
    ["Feast of Souls"] = 0,
    ["Soul Cleave"] = 0,
    ["Soul Carver"] = 0
  },
  ["hg"] = {
    ["Feast of Souls"] = 0
  },
  ["pp"] = {
    ["Immolation Aura"] = 0,
  },
  ["pg"] = {
    ["Immolation Aura"] = 0,
    ["Metamorphosis"] = 0,
    ["Blade Turning"] = 0
  }
}

local health, healthMax = UnitHealth(p),UnitHealthMax(p)
local power, powerMax = UnitPower(p),UnitPowerMax(p)
local absorbs = UnitGetTotalAbsorbs(p)
--------------------------------------------------------------------------------



------------------------ needfull things ---------------------------------------

-- "localizing" globals for faster access
local UnitPower, UnitPowerMax = UnitPower, UnitPowerMax
local UnitHealth, UnitHealthMax = UnitHealth, UnitHealthMax
local GetSpellCooldown, GetSpellDescription = GetSpellCooldown, GetSpellDescription
local UnitAttackPower, GetCritChance = UnitAttackPower, GetCritChance
local UnitGetTotalAbsorbs = UnitGetTotalAbsorbs
-------------------------------------------------------------------------------

local handlers = {
  ["SPELL_UPDATE_USABLE"] = DispatchOnSpellAvailability,
  ["COMBAT_LOG_EVENT_UNFILTERED"] = DispatchOnSpellAvailability,
  ["PLAYER_TALENT_UPDATE"] = UpdateTalents,
  ["SPELLS_CHANGED"] = UpdateArtifactTraits,
  ["PLAYER_ENTERING_WORLD"] = UpdateArtifactTraits,
  ["UNIT_AURA"] = function(_,id) if id == "player" then SoulCleavePrediction() ImmolationAuraGain() MetamorphosisGain() BladeTurningGain() end end,
  ["UNIT_ABSORB_AMOUNT_CHANGED"] = UpdateAbsorbs,
  ["UNIT_HEALTH_FREQUENT"] = function() UpdateHealth() end,
  ["UNIT_POWER_FREQUENT"] = function() UpdatePower() SoulCleavePrediction() FeastOfSoulsPrediction() end
}

----------------------- functions for calculating things ----------------------

GetAP = function()
  local b,p,n = UnitAttackPower(p)
  return b + p + n
end

 GetCrit = function()
  return crit_enabled and (GetCritChance() / 100) + 1 or 1
end

-- invokes the proper event handlers for the given event
EventHandlerDispatcher = function(s,e,...)
  handlers[e](e,...)
end

UpdateArtifactTraits = function()
  -- code by Rainrider from Wowinterface forums
  local u,e,a=UIParent,"ARTIFACT_UPDATE",C_ArtifactUI
   u:UnregisterEvent(e)
   SocketInventoryItem(16)
   local _,_,rank,_,bonusRank = a.GetPowerInfo(select(7,GetSpellInfo("Devour Souls")))
   devour_souls_scalar = 1 + (rank + bonusRank) * 0.03
   soul_carver_unlocked = select(3,a.GetPowerInfo(select(7,GetSpellInfo("Soul Carver")))) > 0
   a.Clear()
   u:RegisterEvent(e)
end

UpdateTalents = function()
  feast_of_souls_talented = select(2, GetTalentTierInfo(feast_of_souls_location.row, feast_of_souls_location.column )) == 1
end


UpdateAbsorbs = function()
  absorbs = UnitGetTotalAbsorbs(p)
    WeakAuras.VB.Absorbs.current = health + values["hg"]["Feast of Souls"] + values["hp"]["Soul Cleave"] + values["hp"]["Feast of Souls"] + values["hp"]["Soul Carver"] + absorbs
      WeakAuras.VB.Absorbs.max = healthMax * 2
end


UpdatePower = function()
  power = UnitPower(p)
  powerMax = UnitPowerMax(p)
end


UpdateHealth = function()
  print("health updated")
  health = UnitHealth(p)
  healthMax = UnitHealthMax(p)
end


DispatchOnSpellAvailability = function(e,...)
  for _,spell in pairs{"Immolation Aura", "Soul Carver"} do
    if e == "SPELL_UPDATE_USABLE" then
      local s = GetSpellCooldown(spell)
      if s and s == 0 and not spellAvailability[spell].available then
        spellAvailability[spell].available = true
        spellAvailability[spell].continuation()
      end
    elseif e == "COMBAT_LOG_EVENT_UNFILTERED" then
      if select(2,...) == "SPELL_CAST_SUCCESS" and select(4,...) == UnitGUID(p) and select(13,...) == spell then
        spellAvailability[spell].available = false
        spellAvailability[spell].continuation()
      end
    end
  end
end


FeastOfSoulsPrediction = function()
  values["hp"]["Feast of Souls"] = (not features["hp"]["Feast of Souls"] or
    not feast_of_souls_talented or
    (not features["ignore cost"] and power < soul_cleave_min_cost)) and 0 or
    GetHeal("Feast of Souls")
    WeakAuras.VB.FeastOfSoulsPrediction.current = health + values["hg"]["Feast of Souls"] + values["hp"]["Soul Cleave"] + values["hp"]["Feast of Souls"]
    WeakAuras.VB.FeastOfSoulsPrediction.max = healthMax
end


SoulCleavePrediction = function()
  if not features["hp"]["Soul Cleave"] or (not features["ignore cost"] and power < soul_cleave_min_cost) then

    values["hp"]["Soul Cleave"] = 0
  else
    local soulFragmentHeal = GetHeal("Shear") * GetSpellCount("Soul Cleave")
    local power = power > soul_cleave_max_cost and soul_cleave_max_cost or power
    local soulCleaveMinHeal = soul_cleave_formula(GetAP())
    values["hp"]["Soul Cleave"] = (soulCleaveMinHeal * (power / soul_cleave_max_cost) * 2 * devour_souls_scalar + soulFragmentHeal) * GetCrit()
  end
  WeakAuras.VB.SoulCleavePrediction.current = health + values["hg"]["Feast of Souls"] + values["hp"]["Soul Cleave"]
  WeakAuras.VB.SoulCleavePrediction.max = healthMax
end


SoulCarverPrediction = function()
  values["hp"]["Soul Carver"] = (not features["hp"]["Soul Carver"] or not soul_carver_unlocked or not spellAvailability["Soul Carver"].available) and 0 or
  soul_carver_soul_fragment_count * GetHeal("Shear") * GetCrit()
  WeakAuras.VB.SoulCarverPrediction.current = health + values["hg"]["Feast of Souls"] + values["hp"]["Soul Cleave"] + values["hp"]["Feast of Souls"] + values["hp"]["Soul Carver"]
  WeakAuras.VB.SoulCarverPrediction.max = healthMax
end



ImmolationAuraPrediction = function()
  values["pp"]["Immolation Aura"] = (not features["pp"]["Immolation Aura"] or not spellAvailability["Immolation Aura"].available) and 0 or immolation_aura_pain_gain
  WeakAuras.VB.ImmolationAuraPrediction.current = power + values["pg"]["Immolation Aura"] + values["pg"]["Metamorphosis"] + values["pp"]["Immolation Aura"]
  WeakAuras.VB.ImmolationAuraPrediction.max = powerMax
end


UpdateGain = function(type, spell, total, talanted)
  if features[type][spell] and (talented == nil or talented) and total ~= 0 then
    local buffed,_,_,_,_,duration,expirationTime = UnitBuff(p, spell)
    values[type][spell] = buffed and (expirationTime - GetTime()) / duration * total or 0
  else
    values[type][spell] = 0
  end
end


ImmolationAuraGain = function()
  UpdateGain("pg", "Immolation Aura", immolation_aura_pain_gain)
  WeakAuras.VB.ImmolationAuraGain.current = power + values["pg"]["Immolation Aura"]
  WeakAuras.VB.ImmolationAuraGain.max = powerMax
end


MetamorphosisGain = function()
  UpdateGain("pg", "Metamorphosis", GetSpellCooldown("Metamorphosis") == 0 and metamorphosis_pain_gain or fueled_by_pain_gain)
  WeakAuras.VB.MetamorphosisGain.current = power + values["pg"]["Immolation Aura"] + values["pg"]["Metamorphosis"]
  WeakAuras.VB.MetamorphosisGain.max = powerMax
end


FeastOfSoulsGain = function()
    UpdateGain("hg", "Feast of Souls", GetHeal("Feast of Souls"), feast_of_souls_talented)
    WeakAuras.VB.FeastOfSoulsGain.current = health + values["hg"]["Feast of Souls"]
    WeakAuras.VB.FeastOfSoulsGain.max = healthMax
end


BladeTurningGain = function()
  UpdateGain("pg", "Blade Turning", blade_turning_gain)
  WeakAuras.VB.BladeTurningGain.current = power + values["pg"]["Blade Turning"]
  WeakAuras.VB.BladeTurningGain.max = powerMax
end


GetHeal = function(spell,regex)
  local h1,h2 = GetSpellDescription(select(7,GetSpellInfo(spell))):match(regex or "(%d+),(%d+)")
  return tonumber(h1..h2)
end



---------------------- frame and event registering ----------------------------
local frame = CreateFrame("Frame", "VengeanceBarsFrame", UIParent)
frame:SetScript("OnEvent", EventHandlerDispatcher)

for k,_ in pairs(handlers) do
  frame:RegisterEvent(k)
end

-- local background = CreateFrame("Frame",nil,UIParent)
-- background:SetHeight(20)
-- background:SetWidth(200)
-- background:SetFrameStrata("BACKGROUND")
--
-- local backgroundTexture = background:CreateTexture(nil, "BACKGROUND")
-- backgroundTexture:SetTexture("Interface\\AddOns\\VengeanceBars\\media\\texture.tga")
-- backgroundTexture:SetAllPoints(background)
-- background.texture = backgroundTexture
--
-- background:SetPoint("CENTER", 0, 0)
-- background:Show()

-------------------------------------------------------------------------------

-- UNIT_HEALTH_FREQUENT, UNIT_POWER_FREQUENT, UNIT_AURA, SPELL_UPDATE_USABLE, COMBAT_LOG_EVENT_UNFILTERED, UNIT_ABSORB_AMOUNT_CHANGED
